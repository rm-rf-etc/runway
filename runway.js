
var _ = require('lodash-node')

var hash = require('crypto').createHash('md5')
var bytes = [0,0,1,0,3,0,32,32,0,0,1,0,32,0,40,16,0,0,54,0,0,0,24,24,0,0,1,0,32,0,40,9,0,0,94,16,0,0,16,16,0,0,1,0,32,0,40,4,0,0,134,25,0,0,40,0,0,0,32,0,0,0,64,0,0,0,1,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,16,0,10,10,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,15,11,118,0,16,13,230,0,10,7,239,0,15,11,192,0,13,13,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,12,12,84,0,11,11,201,0,9,9,242,0,10,9,240,0,9,9,240,0,10,10,243,0,15,8,236,0,13,12,155,0,12,12,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,58,0,14,11,194,0,14,8,236,0,9,9,242,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,242,0,13,11,224,0,13,11,156,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,14,0,11,8,158,0,10,8,238,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,7,239,0,14,9,226,0,12,12,104,0,128,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,15,11,119,0,12,11,225,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,10,241,0,12,10,246,0,14,10,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,7,109,0,15,9,210,0,10,7,239,0,10,10,241,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,9,242,0,13,8,202,0,8,8,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,15,15,35,0,12,12,199,0,10,8,238,0,11,9,240,0,9,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,9,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,10,241,0,13,8,234,0,16,11,115,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,28,28,18,0,13,7,232,0,10,10,243,0,11,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,11,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,11,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,11,10,241,0,13,7,231,0,14,12,169,0,43,0,12,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,242,0,10,7,239,0,12,12,177,0,8,8,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,10,244,0,11,9,240,0,10,9,240,0,10,9,240,0,9,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,9,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,13,10,214,0,20,14,75,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,11,244,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,11,10,241,0,12,11,225,0,13,13,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,9,240,0,11,9,240,0,10,9,240,0,10,10,241,0,14,8,236,0,13,12,152,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,10,241,0,13,6,228,0,0,0,23,0,0,0,0,0,174,90,88,0,177,92,221,0,175,90,218,0,176,90,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,11,9,242,0,13,11,203,0,0,0,0,0,174,89,160,0,176,89,247,0,176,89,247,0,177,89,253,0,177,92,234,0,176,93,129,0,0,0,0,0,11,11,92,0,13,6,228,0,12,9,146,0,15,15,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,9,9,242,0,12,11,205,0,0,0,0,0,177,92,234,0,177,90,253,0,176,89,253,0,177,89,253,0,177,89,253,0,178,89,233,0,0,0,0,0,14,10,128,0,9,9,242,0,10,10,241,0,11,11,217,0,13,13,134,85,85,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,9,242,0,12,11,205,0,0,0,0,0,177,92,234,0,177,89,253,0,177,89,253,0,177,89,253,0,177,89,253,0,175,93,244,0,0,0,0,0,14,6,125,0,10,10,241,0,10,9,240,0,10,9,240,0,10,8,238,0,10,10,213,0,16,16,65,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,9,242,0,14,11,206,0,0,0,0,0,175,94,160,0,176,90,250,0,176,88,253,0,177,89,253,0,178,89,253,0,175,91,173,0,0,0,0,0,10,6,124,0,10,10,241,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,242,0,10,10,241,0,17,12,169,0,13,13,40,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,11,9,240,0,10,10,241,0,13,6,229,0,9,9,58,0,0,0,0,0,178,94,109,0,176,91,237,0,173,90,242,0,177,93,124,0,255,159,8,85,0,85,6,0,11,8,185,0,11,10,241,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,10,243,0,13,12,229,0,13,8,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,49,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,13,8,234,0,13,10,161,36,0,0,14,0,255,255,2,0,166,89,23,0,0,0,0,0,18,13,58,0,15,11,217,0,10,7,239,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,9,242,0,11,11,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,53,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,10,243,0,11,11,223,0,10,10,103,0,9,9,56,0,12,11,184,0,10,10,241,0,10,10,241,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,9,242,0,13,8,181,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,10,10,51,0,11,10,244,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,10,241,0,10,9,240,0,13,7,233,0,11,9,242,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,9,242,0,11,8,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,51,0,11,11,244,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,11,9,240,0,9,9,242,0,13,11,182,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,22,0,12,10,227,0,10,10,241,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,13,13,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,8,65,0,12,8,185,0,12,9,239,0,11,9,242,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,10,243,0,13,11,227,0,14,12,143,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,16,12,82,0,11,11,217,0,10,10,243,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,9,7,239,0,12,11,169,0,14,14,37,0,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,14,7,143,0,13,10,228,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,10,241,0,10,8,238,0,15,11,217,0,13,13,79,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,48,0,13,9,163,0,13,7,233,0,9,9,242,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,10,9,240,0,11,10,241,0,10,10,243,0,11,11,217,0,14,10,124,0,0,128,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,10,10,53,0,12,12,199,0,12,9,242,0,10,9,240,0,11,9,240,0,11,9,240,0,11,9,240,0,11,9,240,0,10,9,240,0,11,9,242,0,11,8,237,0,14,13,142,0,26,26,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,5,104,0,10,10,220,0,10,7,239,0,10,9,240,0,10,9,240,0,11,10,241,0,14,8,236,0,15,12,198,0,23,12,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,14,7,142,0,13,11,224,0,10,7,239,0,13,11,204,0,13,10,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,33,0,18,18,58,0,26,26,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,24,0,0,0,48,0,0,0,1,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,12,65,0,14,9,89,0,13,13,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,47,0,12,11,144,0,11,7,239,0,11,9,255,0,14,9,188,0,15,9,83,0,32,32,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,26,0,14,10,129,0,11,9,216,0,11,10,253,0,10,8,244,0,10,8,241,0,11,9,253,0,10,7,239,0,12,12,177,0,14,11,71,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,15,0,14,12,88,0,11,7,206,0,10,8,250,0,11,8,249,0,10,8,241,0,9,9,240,0,9,9,240,0,10,9,240,0,10,9,245,0,11,9,251,0,10,6,236,0,13,8,155,0,23,8,34,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,13,6,81,0,12,9,176,0,11,10,246,0,11,9,250,0,9,8,242,0,9,9,240,0,9,9,240,0,10,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,8,243,0,10,9,255,0,11,9,244,0,12,9,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,15,34,0,11,10,159,0,10,8,237,0,11,8,252,0,9,8,242,0,10,9,240,0,9,9,240,0,9,9,240,0,10,9,240,0,9,9,240,0,10,9,240,0,9,8,242,0,11,9,250,0,11,9,247,0,12,10,185,0,11,8,68,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,13,9,176,0,12,10,255,0,10,9,245,0,9,9,240,0,10,9,240,0,10,9,240,0,9,9,240,0,9,9,240,0,10,9,240,0,10,9,240,0,11,9,248,0,10,9,251,0,12,7,205,0,14,12,107,0,32,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,15,15,17,0,11,10,202,0,11,9,253,0,9,9,240,0,9,9,240,0,9,9,240,0,10,9,240,0,9,9,240,0,9,9,240,0,10,8,244,0,10,8,252,0,12,9,225,0,12,10,124,0,8,8,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,16,16,16,0,10,10,197,0,11,9,252,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,242,0,11,8,253,0,8,7,235,0,0,3,154,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,0,10,10,197,0,11,9,252,0,9,9,240,0,9,9,240,0,9,9,240,0,10,10,241,0,10,8,241,0,10,7,171,0,0,4,72,0,162,88,52,0,217,115,40,0,255,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,16,16,16,0,10,10,197,0,11,9,252,0,10,9,240,0,9,9,240,0,9,9,240,0,11,9,247,0,8,6,204,0,111,55,23,0,195,100,110,0,179,90,233,0,177,89,242,0,179,93,118,0,179,102,10,0,4,4,61,0,13,8,101,0,13,13,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,16,16,16,0,10,10,197,0,11,9,252,0,9,9,240,0,9,9,240,0,9,9,240,0,11,9,248,0,0,4,185,0,151,81,66,0,180,93,255,0,181,92,255,0,181,92,255,0,178,92,248,0,176,88,55,0,0,2,140,0,11,9,255,0,9,9,188,3,14,11,89,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,16,16,16,0,10,10,197,0,11,9,252,0,9,9,240,0,9,9,240,0,9,9,240,0,10,9,248,0,0,4,185,0,159,84,64,0,179,92,254,0,181,92,255,0,181,91,255,0,185,95,255,0,177,90,62,0,0,0,128,0,10,9,253,0,10,8,251,0,10,8,241,0,11,10,161,0,17,17,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,0,10,10,197,0,11,9,252,0,10,9,240,0,9,9,240,0,10,9,240,0,11,9,247,0,9,7,208,0,80,44,35,0,197,102,115,0,179,93,244,0,178,90,250,0,191,99,132,23,255,139,11,0,6,3,159,0,11,9,249,0,10,9,240,0,10,8,244,0,11,9,253,0,12,10,225,0,13,13,120,0,13,0,19,0,0,0,0,0,0,0,0,0,17,0,15,0,10,9,197,0,11,9,252,0,9,9,240,0,9,9,240,0,9,9,240,0,10,8,241,0,9,8,242,0,8,7,182,4,7,7,70,0,172,88,55,0,193,106,58,0,27,18,28,0,11,9,138,0,10,6,236,0,10,8,243,0,9,9,240,0,9,9,240,0,9,9,240,0,10,9,252,0,11,10,246,0,13,10,80,0,0,0,0,0,0,0,0,0,30,30,17,0,12,10,198,0,11,9,252,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,8,241,0,11,9,252,0,7,7,233,0,0,2,131,0,0,0,103,0,9,9,208,0,11,9,251,0,10,8,244,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,8,244,0,10,9,243,0,11,8,91,0,0,0,0,0,0,0,0,0,15,15,17,0,11,11,201,0,11,9,254,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,11,9,245,0,11,9,248,0,11,8,247,0,11,9,247,0,10,8,241,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,9,240,0,10,8,244,0,11,9,245,0,11,11,91,0,0,0,0,0,0,0,0,0,0,0,4,0,12,10,176,0,11,9,255,0,11,8,246,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,8,241,0,10,8,241,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,8,242,0,11,9,254,0,9,8,233,0,14,14,72,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,45,0,13,10,152,0,12,8,233,0,10,9,255,0,9,9,242,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,11,9,247,0,10,9,250,0,13,10,195,0,14,11,93,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,11,11,70,0,11,10,185,0,11,9,248,0,10,8,248,0,9,8,242,0,9,9,240,0,10,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,9,245,0,11,9,252,0,12,7,227,0,13,10,122,0,22,11,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,15,0,17,0,12,10,105,0,11,8,202,0,11,9,249,0,11,9,249,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,8,243,0,11,9,253,0,9,9,232,0,11,10,157,0,16,16,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,24,0,12,12,129,0,11,10,226,0,10,9,254,0,11,9,244,0,10,10,241,0,11,8,249,0,12,9,249,0,11,9,180,0,15,15,68,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,56,0,11,9,162,0,10,8,238,0,11,9,252,0,12,9,208,0,17,10,107,0,23,23,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,8,0,14,14,73,0,16,13,98,0,13,13,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,16,0,0,0,32,0,0,0,1,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,13,10,100,0,12,10,125,0,26,13,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,11,71,0,11,10,185,0,11,10,255,0,11,9,255,0,12,8,212,0,12,10,107,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,11,47,0,11,11,158,0,10,8,248,0,11,8,254,0,10,8,241,0,9,9,240,0,11,9,249,0,11,9,255,0,12,7,207,0,13,7,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,18,0,11,10,134,0,9,7,233,0,11,10,255,0,10,9,243,0,9,9,240,0,10,9,240,0,9,8,242,0,11,9,255,0,10,8,241,0,12,8,151,0,9,9,28,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,12,10,129,0,12,10,255,0,10,8,246,0,9,9,240,0,9,9,240,0,10,8,241,0,11,9,252,0,11,9,249,0,12,10,174,0,14,9,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,10,10,147,0,11,9,255,0,9,9,240,0,9,7,239,0,10,8,244,0,10,8,253,0,0,1,188,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,11,11,143,0,11,9,255,0,9,9,240,0,10,8,243,0,8,5,233,0,16,11,112,0,154,81,98,0,205,106,77,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,11,11,143,0,11,9,255,0,9,9,240,0,11,9,249,0,0,1,190,0,183,96,96,0,190,97,255,0,189,96,255,0,179,92,94,0,0,0,141,0,10,10,172,0,11,11,46,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,11,143,0,11,9,255,0,9,9,240,0,10,8,248,0,0,3,192,0,178,93,99,0,192,98,255,0,197,99,255,0,203,104,93,0,0,0,159,0,11,10,255,0,11,8,231,0,12,10,123,0,14,14,18,0,0,0,0,0,0,0,0,0,11,11,143,0,11,9,255,0,9,9,240,0,10,8,243,0,8,7,235,0,15,11,120,0,167,90,99,0,182,95,94,0,24,15,84,0,9,8,222,0,10,8,245,0,10,8,247,0,11,9,255,0,10,10,172,0,0,0,4,0,0,0,0,0,12,10,147,0,11,9,255,0,9,9,240,0,9,9,240,0,10,8,243,0,10,8,253,0,0,1,171,0,0,0,153,0,9,8,244,0,11,8,247,0,9,7,239,0,9,9,240,0,10,8,251,0,8,8,211,0,28,0,9,0,0,0,0,0,10,10,130,0,12,9,255,0,10,8,246,0,9,9,240,0,9,9,240,0,10,8,241,0,11,9,251,0,11,9,253,0,10,8,243,0,9,9,240,0,9,9,240,0,10,8,243,0,11,9,255,0,11,11,193,0,0,0,5,0,0,0,0,0,12,12,22,0,12,8,128,0,9,8,233,0,11,8,255,0,10,8,243,0,9,9,240,0,9,9,240,0,9,9,240,0,9,9,240,0,10,8,241,0,11,8,253,0,11,9,250,0,12,11,166,0,11,11,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,6,46,0,12,9,166,0,11,8,245,0,11,9,254,0,10,10,241,0,9,9,240,0,10,8,249,0,11,9,255,0,12,10,198,0,13,10,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,70,0,11,9,194,0,11,9,255,0,12,9,255,0,13,9,224,0,14,12,110,0,28,28,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,12,10,106,0,13,11,134,0,15,7,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
_.each(bytes, function(e){
    hash.update(e.toString())
})
var icon = {
    body: new Buffer( bytes ),
    headers: {
        'Content-Type': 'image/x-icon'
    ,   'Content-Length': bytes.length
    ,   'ETag': '"' + hash.digest() + '"'
    ,   'Cache-Control': 'public, max-age=' + 86400
    }
}

var routes_tree = Object.create(null)
var logger = undefined
var wildcards = [
    { card: '{int}', pattern: '([1-9][0-9]*)'    },
    { card: '{any}', pattern: '([0-9a-zA-Z-_]+)' },
    { card: '{a-z}', pattern: '([a-zA-Z]+)'      },
    { card: '{num}', pattern: '([0-9]+)'         }
]



/**
 * Although possibly confusing to read, this minimalist set of nested closures
 * is the entire API for defining routes (aside from router.config()).
 */
function router(){

    add.group = group
    add.config = config
    add.group.config = config

    // c is for controller, f is for filters.
    function add(url, f, c){
        var Ω, nested

        if (typeof url !== 'string')
            throw new Error('Router accepts only a string as the first argument.')

        c = arguments[arguments.length-1]
        f = (_.isArray(f)) ? f : []

        if (!_.isFunction(c)) throw new Error('Controller either not specified or invalid.')
        _.each(f,function(e){
            if (!_.isFunction(e)) throw new Error('Filter is not a function: '+{}.toString.apply(e))
        })

        Ω = [].concat(f).concat(c)

        if (logger)
            logger('add route:', url, 'filters and controller:', Ω)
        // Convert route string into array of path segments.
        url = url.replace(/(^\/|\/$)/g,'').split('/')
        url[url.length] = 'Ω'
        nested = newBranch(url, Ω)

        // Now include the new route in our routes map object.
        _.merge(routes_tree, nested, function(a,b){
            var arr = a || b
            if (_.isArray(a))
                return _.uniq(a.concat(b), function(x){if (x) return x.toString()})
            else if (_.isArray(b))
                return b
        }) // Arrays are used for storing any segments which contain regex.

        return add
    }

    function group(base_url, f, c){
        c = arguments[arguments.length-1]
        f = (_.isArray(f)) ? f : undefined
        c = (_.isFunction(c)) ? c : undefined

        base_url = base_url.replace(/(^\/|\/$)/g,'')

        function sub_route(new_sub_route, f2, c2){
            new_sub_route = new_sub_route.replace(/(^\/|\/$)/g,'')

            c2 = arguments[arguments.length-1]
            c2 = (_.isFunction(c2)) ? c2 : c
            f2 = (_.isArray(f2)) ? f2 : f

            if (!c2)
                throw new Error('Controller not specified.')
            if (f2)
                add.apply(null, [base_url+'/'+new_sub_route, f2, c2])
            else
                add.apply(null, [base_url+'/'+new_sub_route, c2])

            return sub_route
        }
        sub_route.endgroup = add
        sub_route.group = group
        sub_route.config = config
        
        return sub_route
    }

    return add.apply(null, arguments)
}
router.config = config

/**
 * Configuration API.
 */
function config(options){

    if (options) {
        // Override default 404 response function.
        if (options.error && _.isFunction(options.error))
            sendError = options.error

        // Provide a callback to use for logging. Change to null/false/undefined to disable.
        if (options.logger && _.isFunction(options.logger))
            logger = options.logger

        // Override default favicon request handler.
        if (options.favicon && _.isString(options.favicon) && require.resolve(options.favicon)) {
            bytes = require('fs').readFileSync( options.favicon ).toJSON()
            _.each(bytes, function(e){
                hash.update(e.toString())
            })
        }

        // Add new wild card expressions.
        if (options.wildcards && _.isArray(options.wildcards)) {
            wildcards = _(wildcards).concat(options.wildcards).where(function(obj){
                return obj.card && obj.pattern && _.isString(obj.card) && _.isString(obj.pattern)
            }).value()
        }
    }

    return router
}


// Default failure handler (when no matching route is found). Use config() to override.
function sendError(code, req, res, args, ops){
    res.end(code)
}
// Default failure handler (when no matching route is found). Use config() to override.
function favicon(req, res, args, ops){
    res.writeHead( icon.headers )
    res.end( icon.body )
}
/**
 * Less abstraction is good for performance. Pass this to your server object;
 * it's the request event listener. It will try to match the requested URL and
 * and invoke the associated controller, or otherwise invoke error(), which
 * calls req.end('404') as the default. But you can override it using config().
 */
router.listener = function(req, res){

    var Ω, ops, route, args, norm, regs, redirect, i, n
    args = []
    n = 0

    ops = {
        i_redirect: function(fn){ // replace the controller with a different one.
            Ω[Ω.length-1] = fn
        },
        redirect: function(url){ // immediately respond with a 302 redirect.
            res.writeHead(302, {'Location': url})
            res.end()
        },
        error: function(code){
            sendError(code,req,res)
        }
    }

    // Convert route into array of URL segments, ending with "Ω", the leaf node.
    route = req.url.slice(1).replace(/\/$/g,'').split('?')[0].split('/')
    route[route.length] = 'Ω'

    // Climb the routes map, always check first for a matching static route segment before trying regex.
    Ω =  _.reduce(route, function(obj, seg){
        if (!obj)
            return

        if (seg === 'favicon.ico')
            return favicon(req,res)

        norm = obj[seg] || undefined
        if (norm)
            return norm
        
        regs = obj['{regex}'] || undefined
        if (regs) {
            for (i=0; i < regs.length; i++) {
                if (regs[i].test(seg)) {
                    args[n++] = regs[i].exec(seg)[1] // Increments n after the value is used for the assignment. More performant than .push().
                    return obj[regs[i].toString()]
                }
            }
        }
    }, routes_tree) // <-- This is the object to climb.

    i = -1
    if (Ω) {
        // Execute in order, each function stored in the leaf node. (note: Ω[i++] != Ω[++i])
        (function next(){
            i++
            if (Ω[i])
                return Ω[i](req, res, args, ops, next)
            else
                return sendError('404', req, res, args, ops)
        })()
    }
    else sendError('404', req, res, args, ops)
}



/**
 * Helpers
 */
// Swap keys for values in a given string and return it as a regular expression.
function toRegExp(string){
    _(wildcards).each(function(e){
        string = string.replace(e.card, e.pattern)
    })
    
    return new RegExp(string)
}
// A branch is a series of nested objects.
function newBranch(array, fn){
    return _.reduce(array.reverse(), function(cumulate, segment){
        var x = Object.create(null)
        if (/\{...\}/g.test(segment)) {
            var re = toRegExp(segment)
            x['{regex}'] = [re]
            x[re.toString()] = cumulate
            return x
        } else {
            x[segment] = cumulate
            return x
        }
    }, fn)
}



/**
 */
module.exports = router
